/* This file was generated by KreMLin <https://github.com/FStarLang/kremlin>
 * KreMLin invocation: ../krml -fc89 -minimal -tmpdir extracted -warn-error +9+11 -skip-compilation -extract-uints -add-include <inttypes.h> -add-include "kremlib.h" -add-include "kremlin/internal/compat.h" extracted/prims.krml extracted/FStar_Pervasives_Native.krml extracted/FStar_Pervasives.krml extracted/FStar_Mul.krml extracted/FStar_Squash.krml extracted/FStar_Classical.krml extracted/FStar_List_Tot_Base.krml extracted/FStar_List_Tot_Properties.krml extracted/FStar_StrongExcludedMiddle.krml extracted/FStar_List_Tot.krml extracted/FStar_Seq_Base.krml extracted/FStar_Seq_Properties.krml extracted/FStar_Seq.krml extracted/FStar_Math_Lib.krml extracted/FStar_Math_Lemmas.krml extracted/FStar_BitVector.krml extracted/FStar_UInt.krml extracted/FStar_UInt32.krml extracted/FStar_Int.krml extracted/FStar_Int16.krml extracted/FStar_Preorder.krml extracted/FStar_Ghost.krml extracted/FStar_ErasedLogic.krml extracted/FStar_UInt64.krml extracted/FStar_FunctionalExtensionality.krml extracted/FStar_Set.krml extracted/FStar_PropositionalExtensionality.krml extracted/FStar_PredicateExtensionality.krml extracted/FStar_TSet.krml extracted/FStar_Monotonic_Heap.krml extracted/FStar_Heap.krml extracted/FStar_Map.krml extracted/FStar_Monotonic_HyperHeap.krml extracted/FStar_Monotonic_HyperStack.krml extracted/FStar_HyperStack.krml extracted/FStar_Monotonic_Witnessed.krml extracted/FStar_HyperStack_ST.krml extracted/FStar_HyperStack_All.krml extracted/FStar_Date.krml extracted/FStar_Universe.krml extracted/FStar_GSet.krml extracted/FStar_ModifiesGen.krml extracted/LowStar_Monotonic_Buffer.krml extracted/LowStar_Buffer.krml extracted/Spec_Loops.krml extracted/LowStar_BufferOps.krml extracted/C_Loops.krml extracted/FStar_UInt8.krml extracted/FStar_Kremlin_Endianness.krml extracted/FStar_UInt63.krml extracted/FStar_Exn.krml extracted/FStar_ST.krml extracted/FStar_All.krml extracted/FStar_Dyn.krml extracted/FStar_Int63.krml extracted/FStar_Int64.krml extracted/FStar_Int32.krml extracted/FStar_Int8.krml extracted/FStar_UInt16.krml extracted/FStar_Int_Cast.krml extracted/FStar_UInt128.krml extracted/C_Endianness.krml extracted/FStar_List.krml extracted/FStar_Float.krml extracted/FStar_IO.krml extracted/LowStar_Modifies.krml extracted/FStar_Char.krml extracted/FStar_String.krml extracted/FStar_Bytes.krml extracted/C.krml extracted/C_String.krml extracted/FStar_HyperStack_IO.krml extracted/C_Failure.krml extracted/TestLib.krml extracted/FStar_Int_Cast_Full.krml
 * F* version: a4bbc2d1
 * KreMLin version: 47733122
 */


#ifndef __FStar_BitVector_H
#define __FStar_BitVector_H

#include "Prims.h"
#include "FStar_Pervasives_Native.h"
#include "FStar_List_Tot_Base.h"
#include "FStar_Seq_Base.h"
#include <inttypes.h>
#include "kremlib.h"
#include "kremlin/internal/compat.h"

typedef struct Prims_list__bool_s Prims_list__bool;

typedef struct Prims_list__bool_s
{
  Prims_list__Prims_string_tags tag;
  bool hd;
  Prims_list__bool *tl;
}
Prims_list__bool;

typedef struct FStar_Seq_Base_seq__bool_s { Prims_list__bool *l; } FStar_Seq_Base_seq__bool;

FStar_Seq_Base_seq__bool FStar_Seq_Base_create__bool(Prims_int len, bool v);

FStar_Seq_Base_seq__bool FStar_BitVector_zero_vec(Prims_pos n);

/*
 [tail l] returns [l] without its first element. Requires, at
type-checking time, that [l] be nonempty. Similar to: tl in OCaml, F#, Coq

*/
Prims_list__bool *FStar_List_Tot_Base_tail__bool(Prims_list__bool *uu___47_64);

extern Prims_list__bool *(*FStar_List_Tot_Base_tl__bool)(Prims_list__bool *x0);

/*
 [hd l] returns the first element of [l]. Requires [l] to be
nonempty, at type-checking time. Named as in: OCaml, F#, Coq 
*/
bool FStar_List_Tot_Base_hd__bool(Prims_list__bool *uu___46_38);

FStar_Seq_Base_seq__bool
FStar_Seq_Base_upd__bool(FStar_Seq_Base_seq__bool s, Prims_int n, bool v);

FStar_Seq_Base_seq__bool FStar_BitVector_elem_vec(Prims_pos n, Prims_int i);

FStar_Seq_Base_seq__bool FStar_BitVector_ones_vec(Prims_pos n);

/*
 [index l n] returns the [n]-th element in list [l] (with the first
element being the 0-th). Requires, at type-checking time, that [l] be
of length at least [n+1]. 
*/
bool FStar_List_Tot_Base_index__bool(Prims_list__bool *l, Prims_int i);

bool FStar_Seq_Base_index__bool(FStar_Seq_Base_seq__bool s, Prims_int i);

/*
 [append l1 l2] appends the elements of [l2] to the end of [l1]. Named as: OCaml, F#. Similar to: [List.app] in Coq. 
*/
Prims_list__bool *FStar_List_Tot_Base_append__bool(Prims_list__bool *x, Prims_list__bool *y);

FStar_Seq_Base_seq__bool
FStar_Seq_Base_append__bool(FStar_Seq_Base_seq__bool s1, FStar_Seq_Base_seq__bool s2);

FStar_Seq_Base_seq__bool
FStar_Seq_Base_slice__bool(FStar_Seq_Base_seq__bool s, Prims_int i, Prims_int j);

FStar_Seq_Base_seq__bool
FStar_BitVector_logand_vec(Prims_pos n, FStar_Seq_Base_seq__bool a, FStar_Seq_Base_seq__bool b);

FStar_Seq_Base_seq__bool
FStar_BitVector_logxor_vec(Prims_pos n, FStar_Seq_Base_seq__bool a, FStar_Seq_Base_seq__bool b);

FStar_Seq_Base_seq__bool
FStar_BitVector_logor_vec(Prims_pos n, FStar_Seq_Base_seq__bool a, FStar_Seq_Base_seq__bool b);

FStar_Seq_Base_seq__bool FStar_BitVector_lognot_vec(Prims_pos n, FStar_Seq_Base_seq__bool a);

FStar_Seq_Base_seq__bool
FStar_BitVector_shift_left_vec(Prims_pos n, FStar_Seq_Base_seq__bool a, Prims_int s);

FStar_Seq_Base_seq__bool
FStar_BitVector_shift_right_vec(Prims_pos n, FStar_Seq_Base_seq__bool a, Prims_int s);

#define __FStar_BitVector_H_DEFINED
#endif
